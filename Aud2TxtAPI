# app.py
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/upload-audio', methods=['POST'])
def upload_audio():
    if 'audio' not in request.files:
        return jsonify({'error': 'No audio file provided'}), 400

    audio_file = request.files['audio']
    if audio_file.filename == '':
        return jsonify({'error': 'No audio file provided'}), 400

    # Save the audio file to disk
    audio_file.save('uploaded_audio.wav')

    return jsonify({'message': 'Audio file uploaded successfully'}), 200

if __name__ == '__main__':
    app.run(debug=True)




from pydub import AudioSegment
import whisper

def segment_audio(file_path, segment_duration_ms=30000):  # 30 seconds per segment
    """Split the audio file into manageable segments."""
    audio = AudioSegment.from_file(file_path)
    length_audio = len(audio)
    segments = []
    for start in range(0, length_audio, segment_duration_ms):
        end = start + segment_duration_ms
        segment = audio[start:end]
        segment_file_path = f"{file_path[:-4]}_segment_{start//1000}-{end//1000}.wav"
        segment.export(segment_file_path, format="wav")
        segments.append(segment_file_path)
    return segments

def transcribe_segments(segments):
    """Transcribe each segment using Whisper and combine the results."""
    model = whisper.load_model("base")
    full_transcript = ""
    for segment_path in segments:
        result = model.transcribe(segment_path, verbose=True)
        full_transcript += result['text'] + " "
    return full_transcript.strip()

def main():
    file_path = 'path_to_your_long_audio_file.wav'
    segments = segment_audio(file_path)
    transcription = transcribe_segments(segments)
    print("Complete Transcription:")
    print(transcription)

if __name__ == "__main__":
    main()



with open(TRANSCRIPTS_FILE, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        # Filter out empty lines and get the last 50 lines
        non_empty_lines = [line for line in lines if line.strip()]
        recent_transcripts = non_empty_lines[-50:]  # Get the last 50 non-empty lines
        recent_transcripts_content = "".join(recent_transcripts)
