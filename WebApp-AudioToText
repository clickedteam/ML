<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Audio Recorder</title>
</head>
<body>
  <h1>Audio Recorder</h1>
  <button id="startRecording">Start Recording</button>
  <button id="stopRecording" disabled>Stop Recording</button>

  <script>
    let recorder;
    let isRecording = false;

    const startRecording = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        recorder = new MediaRecorder(stream);
        
        const chunks = [];
        recorder.ondataavailable = (event) => {
          chunks.push(event.data);
        };

        recorder.onstop = async () => {
          const blob = new Blob(chunks, { type: 'audio/wav' });
          const formData = new FormData();
          formData.append('audio', blob, 'recording.wav');

          const response = await fetch('http://localhost:5000/upload-audio', {
            method: 'POST',
            body: formData
          });
          const data = await response.json();
          console.log(data);
        };

        recorder.start();
        isRecording = true;
        document.getElementById('startRecording').disabled = true;
        document.getElementById('stopRecording').disabled = false;
      } catch (error) {
        console.error('Error starting recording:', error);
      }
    };

    const stopRecording = () => {
      if (isRecording) {
        recorder.stop();
        isRecording = false;
        document.getElementById('startRecording').disabled = false;
        document.getElementById('stopRecording').disabled = true;
      }
    };

    document.getElementById('startRecording').addEventListener('click', startRecording);
    document.getElementById('stopRecording').addEventListener('click', stopRecording);
  </script>
</body>
</html>


***********************



<!DOCTYPE html>
<html>
<head>
    <title>Audio Record with Visualization</title>
    <style>
        canvas {
            width: 100%;
            height: 50px;
            background-color: #f8f8f8;
        }
    </style>
</head>
<body>
    <button id="startRecording">Start Recording</button>
    <button id="stopRecording" disabled>Stop Recording</button>
    <canvas id="visualization"></canvas>
    <script>
        let mediaRecorder;
        let audioContext, analyser, microphone, animationFrameId;

        const canvas = document.getElementById('visualization');
        const canvasContext = canvas.getContext('2d');
        const startButton = document.getElementById('startRecording');
        const stopButton = document.getElementById('stopRecording');

        function visualize(stream) {
            if (!audioContext) {
                audioContext = new AudioContext();
            }
            analyser = audioContext.createAnalyser();
            microphone = audioContext.createMediaStreamSource(stream);
            microphone.connect(analyser);
            analyser.fftSize = 256;
            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);

            function draw() {
                animationFrameId = requestAnimationFrame(draw);
                analyser.getByteFrequencyData(dataArray);

                canvasContext.fillStyle = 'rgb(255, 255, 255)';
                canvasContext.fillRect(0, 0, canvas.width, canvas.height);

                let barWidth = (canvas.width / bufferLength) * 2.5;
                let barHeight;
                let x = 0;

                for(let i = 0; i < bufferLength; i++) {
                    barHeight = dataArray[i];
                    canvasContext.fillStyle = 'rgb(' + (barHeight+100) + ',50,50)';
                    canvasContext.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight / 2);

                    x += barWidth + 1;
                }
            }
            draw();
        }

        startButton.onclick = () => {
            navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                mediaRecorder = new MediaRecorder(stream);
                visualize(stream);

                mediaRecorder.start();
                startButton.disabled = true;
                stopButton.disabled = false;
            })
            .catch(error => {
                console.error('Error accessing the media devices:', error);
            });
        };

        stopButton.onclick = () => {
            mediaRecorder.stop();
            startButton.disabled = false;
            stopButton.disabled = true;
            cancelAnimationFrame(animationFrameId);
        };
    </script>
</body>
</html>

